# Codeforces
//https://codeforces.com/problemset/problem/1494/A

#include<bits/stdc++.h>
using namespace std;
#define ll long long int

bool areBracketsBalanced(string expr)
{
    stack<char> s;
    char x;
 
    // Traversing the Expression
    for (int i = 0; i < expr.length(); i++)
    {
        if (expr[i] == '(' )
        {
            // Push the element in the stack
            s.push(expr[i]);
            continue;
        }
 
        // IF current current character is not opening
        // bracket, then it must be closing. So stack
        // cannot be empty at this point.
        if (s.empty())
            return false;
 
        switch (expr[i])
        {
        case ')':
 
            // Store the top element in a
            x = s.top();
            s.pop();
            if (x == '{' || x == '[')
                return false;
            break;
        }
    }
 
    return (s.empty());
}
int main(){
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);cout.tie(NULL);
     
    ll t;
       cin>>t;
       while(t--){
          string s,s2;
          cin>>s;
          s2=s;
          int n=s.length();
          int f=s[0],la=s[n-1];
int x;
          if(f=='A'||la=='A'&&f=='B'||la=='B')
          x='C';
            else if(f=='B'||la=='B'&&f=='C'||la=='C')
          x='A';
else 
          x='B';
          for(ll i=0;i<n;i++){
              if(s[i]==f){
              s[i]='(';s2[i]='(';}
              else if(s[i]==la){
             s[i]=')';s2[i]=')';}
             else{ s[i]=')';s2[i]='(';
             }
          }
          ll z=0;
          if(areBracketsBalanced(s)) z=1;
          else if(areBracketsBalanced(s2)) z=1;
          if(z==1) cout<<"YES\n";
          else cout<<"NO\n"; 
       }
        
    
    return 0;
}
